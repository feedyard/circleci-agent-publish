jobs:

  build-release:
    description: Check, build, and optionally deploy a Docker image.
    context: ci
    executor: circleci-base-agent
    parameters:
      dockerfile:
        description: Name of dockerfile to use. Defaults to Dockerfile.
        type: string
        default: Dockerfile
      path:
        description: Path to the directory containing your Dockerfile and build context. Defaults to . (working directory).
        type: string
        default: .
      image:
        description: Name of image to create. Defaults to a combination of $CIRCLE_PROJECT_REPONAME.
        type: string
        default: $CIRCLE_PROJECT_REPONAME
      tag:
        description: Value for tag to use. Defaults to $CIRCLE_SHA1.
        type: string
        default: $CIRCLE_SHA1
      registry:
        description: Name of registry to use. Defaults to docker.io.
        type: string
        default: docker.io
      extra-build-args:
        description: >
          Extra flags to pass to docker build. For examples, see
          https://docs.docker.com/engine/reference/commandline/build
        type: string
        default: ""
      after-checkout:
        description: Optional steps to run after checking out the code.
        type: steps
        default: []
      before-build:
        description: Optional steps to run before building the docker image.
        type: steps
        default: []
      after-build:
        description: Optional steps to run after building the docker image.
        type: steps
        default: []
    steps:
      - checkout
      - when:
          name: Run after_checkout lifecycle hook steps.
          condition: << parameters.after-checkout >>
          steps: << parameters.after-checkout >>
      - setup_remote_docker
      - check-registry:
          registry: << parameters.registry >>
      - when:
          name: Run before_build lifecycle hook steps.
          condition: << parameters.before-build >>
          steps: << parameters.before-build >>
      - build:
          dockerfile: << parameters.dockerfile >>
          path: << parameters.path >>
          image: << parameters.image >>
          tag: << parameters.tag >>
          registry: << parameters.registry >>
          extra-build-args: << parameters.extra-build-args >>
      - when:
          name: Run after_build lifecycle hook steps.
          condition: << parameters.after-build >>
          steps: << parameters.after-build >>
      - push:
          registry: << parameters.registry >>
          image: << parameters.image >>
          release: edge

#jobs:
#
#  dev-release:
#    steps:
#      - checkout
#      - setup_remote_docker
#      # - common-tasks/decrypt-env
#      - run:
#          name: validate yaml
#          command: yamllint .
#      - run:
#          name: validate orbs
#          command: |
#            for ORB in src/*; do
#              echo "Validating $ORB"
#              circleci orb validate $ORB/orb.yaml
#            done
#      - run:
#          name: SHA1/latest development release
#          command: |
#            for ORB in src/*; do
#              orbname=$(basename $ORB)
#              circleci orb source $CIRCLE_PROJECT_USERNAME/$orbname@dev:latest > $orbname.latest
#              if [[ $(diff <(printf %s "$(< $ORB/orb.yaml)") <(printf %s "$(< $orbname.latest)")) ]]; then
#                echo "dev-release of $CIRCLE_PROJECT_USERNAME/$orbname"
#                circleci orb publish $ORB/orb.yaml $CIRCLE_PROJECT_USERNAME/$orbname@dev:$CIRCLE_SHA1 --token $CIRCLECI_API_TOKEN
#                circleci orb publish $ORB/orb.yaml $CIRCLE_PROJECT_USERNAME/$orbname@dev:latest --token $CIRCLECI_API_TOKEN
#              fi
#            done
